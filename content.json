{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2024/03/17/hello-world/"},{"title":"First_blog","text":"你好，这是我的第一条博客","link":"/2024/03/17/First-blog/"},{"title":"快速排序(quick_sort)","text":"题目描述给定你一个长度为 n 的整数数列。请你使用快速排序对这个数列按照从小到大进行排序，并将排好序的数列按顺序输出。 输入格式输入共两行，第一行包含整数 n。第二行包含 n 个整数（所有整数均在 1∼109 范围内），表示整个数列。 输出格式输出共一行，包含 n 个整数，表示排好序的数列。 数据范围1 ≤ n ≤ 100000 样例输入样例：1253 1 2 4 5 输出样例：11 2 3 4 5 C++ 代码算法1：使用手写快速排序123456789101112131415161718192021222324252627282930313233#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005int q[N], n;void quick_sort(int l, int r) { if(l &gt;= r) return ; int i = l - 1, j = r + 1; int x = q[l + r &gt;&gt; 1]; while(i &lt; j) { do ++i; while(q[i] &lt; x); do --j; while(q[j] &gt; x); if(i &lt; j) swap(q[i], q[j]); } quick_sort(l, j); quick_sort(j + 1, r);}int main() { scanf(&quot;%d&quot;,&amp;n); for(int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;,q+i); quick_sort(1, n); for(int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;,q[i]); return 0;} 算法2：(c++STL) O(nlogn) 用algorithm库的sort函数1234567891011121314151617#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005int q[N], n;int main() { scanf(&quot;%d&quot;,&amp;n); for(int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;,q+i); sort(q + 1, q + 1 + n); // STL yyds!!! for(int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;,q[i]); return 0;}","link":"/2024/05/27/quick-sort/"},{"title":"归并排序(merge_sort)","text":"题目描述给定你一个长度为 n 的整数数列。请你使用归并排序对这个数列按照从小到大进行排序，并将排好序的数列按顺序输出。 输入格式输入共两行，第一行包含整数 n。第二行包含 n 个整数（所有整数均在 1∼109 范围内），表示整个数列。 输出格式输出共一行，包含 n 个整数，表示排好序的数列。 数据范围1 ≤ n ≤ 100000 样例输入样例：1253 1 2 4 5 输出样例：11 2 3 4 5 算法1 (排序) O(nlogn)归并排序板子，先分组，再组合（merge） C++ 代码1234567891011121314151617181920212223242526272829303132333435363738#include &lt;bits/stdc++.h&gt;using namespace std;#define N 100005int n, q[N];void merge_sort(int q[], int l, int r) { if (l &gt;= r) return; int mid = (l + r) &gt;&gt; 1; merge_sort(q, l, mid); merge_sort(q, mid + 1, r); int temp[N]; int k = 0; int x = l, y = mid + 1; while (x &lt;= mid &amp;&amp; y &lt;= r) { if (q[x] &lt;= q[y]) temp[++k] = q[x++]; else temp[++k] = q[y++]; } while (x &lt;= mid) temp[++k] = q[x++]; while (y &lt;= r) temp[++k] = q[y++]; for (int i = 1, j = l; j &lt;= r; ++i, ++j) q[j] = temp[i];}int main() { scanf(&quot;%d&quot;, &amp;n); for (int i = 1; i &lt;= n; ++i) scanf(&quot;%d&quot;, q + i); merge_sort(q, 1, n); for (int i = 1; i &lt;= n; ++i) printf(&quot;%d &quot;, q[i]); return 0;}","link":"/2024/05/27/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F-merge-sort/"},{"title":"整数二分(besearch)","text":"题目描述给定一个按照升序排列的长度为 n 的整数数组，以及 q 个查询。对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。如果数组中不存在该元素，则返回 -1 -1。 输入格式 第一行包含整数 n 和 q，表示数组长度和询问个数。 第二行包含 n 个整数（均在 1∼10000 范围内），表示完整数组。 接下来 q 行，每行包含一个整数 k，表示一个询问元素。 输出格式共 q 行，每行包含两个整数，表示所求元素的起始位置和终止位置。如果数组中不存在该元素，则返回 -1 -1。 数据范围 1≤n≤100000 1≤q≤10000 1≤k≤10000 样例输入样例：123456 31 2 2 3 3 4345 输出样例：1233 45 5-1 -1 算法1(二分) O(nlogn)枚举左端点和右端点 C++ 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include &lt;bits/stdc++.h&gt;using namespace std;#define N 1000010int n, k, q, a[N];// 查找元素q在数组a中的首次和最后一次出现的位置void bearch(int q) { // leftans和rightans用于存储结果，初始化为最大值和最小值 int leftans = INT_MAX, rightans = INT_MIN; int l = 0, r = n - 1; // 找到元素q的首次出现位置 while (l &lt; r) { int mid = (l + r) &gt;&gt; 1; // 等价于 (l + r) / 2 if (a[mid] &gt;= q) r = mid; else l = mid + 1; } // 如果在数组a中没有找到元素q，输出-1 -1 if (a[l] != q) { printf(&quot;-1 -1\\n&quot;); return; } // 输出元素q的首次出现位置 printf(&quot;%d &quot;, l); // 重置左右边界，准备查找最后一次出现位置 l = 0, r = n - 1; // 找到元素q的最后一次出现位置 while (l &lt; r) { int mid = (l + r + 1) &gt;&gt; 1; // 等价于 (l + r + 1) / 2 if (a[mid] &lt;= q) l = mid; else r = mid - 1; } // 输出元素q的最后一次出现位置 printf(&quot;%d\\n&quot;, l); return;}int main() { // 输入数组长度n和查询次数k scanf(&quot;%d %d&quot;, &amp;n, &amp;k); // 输入数组元素 for (int i = 0; i &lt; n; ++i) scanf(&quot;%d&quot;, a + i); // 对每个查询执行bearch函数 while (k--) { scanf(&quot;%d&quot;, &amp;q); bearch(q); } return 0;} 算法2(upperbound 和 lowerbound) O(nlogn)STL 大法好！！！ 12345678910111213141516171819202122232425262728#include &lt;bits/stdc++.h&gt;using namespace std;#define N 1000010int n, k, q, a[N];int main() { scanf(&quot;%d %d&quot;, &amp;n, &amp;k); for (int i = 0; i &lt; n; ++i) scanf(&quot;%d&quot;,a + i); while (k--) { scanf(&quot;%d&quot;, &amp;q); int t = lower_bound(a, a + n, q) - a; if (t == n || a[t] != q) { puts(&quot;-1 -1&quot;); continue; } printf(&quot;%d &quot;, t); t = upper_bound(a, a + n, q) - a; printf(&quot;%d\\n&quot;, t - 1); } return 0;}","link":"/2024/05/28/%E6%95%B4%E6%95%B0%E4%BA%8C%E5%88%86/"},{"title":"数的三次方根","text":"题目描述给定一个浮点数 n，求它的三次方根。 输入格式共一行，包含一个浮点数 n。 输出格式共一行，包含一个浮点数，表示问题的解。 注意，结果保留 6 位小数。 数据范围 −10000≤n≤10000 样例输入样例：11000.00 输出样例：110.000000 算法1(二分) O(logn)小数二分 C++ 代码123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;using namespace std;double x;double bsearch(double x) { double l = -1e3, r = 1e3; while(r - l &gt; 1e-8) { //取保留位数多2位,如:保留一位小数,写1e-3 double mid = (l + r) / 2; if(mid * mid * mid &gt;= x) r = mid; else l = mid; } return l;}int main() { cin &gt;&gt; x; printf(&quot;%.6lf&quot;,bsearch(x)); return 0;}","link":"/2024/05/28/%E6%95%B0%E7%9A%84%E4%B8%89%E6%AC%A1%E6%96%B9%E6%A0%B9/"}],"tags":[{"name":"Computer","slug":"Computer","link":"/tags/Computer/"},{"name":"日常","slug":"日常","link":"/tags/%E6%97%A5%E5%B8%B8/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"}],"categories":[],"pages":[]}